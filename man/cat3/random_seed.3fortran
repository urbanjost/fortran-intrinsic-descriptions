NAME

RANDOM_SEED(3) - [MATHEMATICS:RANDOM] Pseudorandom number generator
control.

SYNTAX

    call random_seed(size, put, get)

       subroutine random_seed(size, put, get)
       integer,intent(out),optional :: size
       integer,intent(in),optional  :: put(*)
       integer,intent(out),optional :: get(*)

where the size of put() and get() must be >= SIZE, and the call must
either have no parameters or one.

DESCRIPTION

RANDOM_SEED(3F) initializes and/or queries the seed used by the
pseudorandom number generator procedure RANDOM_NUMBER(3F). It can be
used to start a repeatable sequence of pseudorandom values.

To reproduce the same sequence of pseudo_random values one needs to
provide the same starting point, defined by an array of whole numbers
called the seed. Fortran does not define what random number generator
algorithm should be used by the random_number(3f) procedure so different
size seeds may be required with different compilers. The SIZE parameter
is provided so that this size may be queried generically.

Do not depend on whether random_number(3f) generates the same or a
random sequence by default the first time it is called. If RANDOM_SEED()
is called without arguments, it is seeded with random data retrieved
from the operating system. If you want the same sequence each time
provide the seed array.

Restarts or queries the state of the pseudorandom number generator used
by RANDOM_NUMBER().

ARGUMENTS

    SIZE
        specifies the minimum size of the arrays used as the seed arrays
        PUT and GET.

    PUT
        An array of values used in a processor-dependent manner to
        define a specific sequence of random numbers.

    If no arguments at all are present, the processor assigns a
    processor-dependent value to the seed.

    GET
        It is assigned the value of the seed when queried. The values
        may then be used as the PUT values on a subsequent call to
        __random_seed() to reset the pseudorandom sequence returned by
        random_number(3f) to the same sequence.

    The seed returned is what is required to generate the sequence that
    would be generated by the next call to random_\number(3f), and so
    changes with each call to random_number(3f).

EXAMPLES

Sample program:

    program demo_random_seed
    implicit none
    real :: vals(4)
    integer, allocatable :: seed(:)
    integer :: n

       CALL RANDOM_SEED() ! Processor-dependent initialization

       ! set size of seed array
       call random_seed(size = n)

       ! get the current seed array
       allocate(seed(n))
       call random_seed(get=seed)

       ! generate some random_numbers
       call random_number(vals)
       write (*, *) vals

       ! reset to the same starting point
       call random_seed(put=seed)
       ! to prove vals is really reset to same sequence
       vals=0.0
       call random_number(vals)
       write (*, *) vals

    end program demo_random_seed

Typical Results: ```text 3.9208680E-07 2.5480442E-02 0.3525161 0.6669145
3.9208680E-07 2.5480442E-02 0.3525161 0.6669145

STANDARD

Fortran 95 and later

SEE ALSO

RANDOM_NUMBER(3), __random_init(3)

fortran-lang intrinsic descriptions (license: MIT) @urbanjost
